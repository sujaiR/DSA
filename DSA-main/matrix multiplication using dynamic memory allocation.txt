#include <stdio.h>
#include <stdlib.h>

int main() {
    int **matrix1, **matrix2, **result;
    int row1, col1, row2, col2, i, j, k;

    // Input dimensions for matrix 1
    printf("Enter number of rows and columns for Matrix 1: ");
    scanf("%d %d", &row1, &col1);

    // Input dimensions for matrix 2
    printf("Enter number of rows and columns for Matrix 2: ");
    scanf("%d %d", &row2, &col2);

    // Check if multiplication is possible
    if (col1 != row2) {
        printf("Matrix multiplication is not possible!\n");
        return 1;
    }

    // Allocate memory for matrix1
    matrix1 = (int **)malloc(row1 * sizeof(int *));
    for (i = 0; i < row1; i++) {
        matrix1[i] = (int *)malloc(col1 * sizeof(int));
    }

    // Allocate memory for matrix2
    matrix2 = (int **)malloc(row2 * sizeof(int *));
    for (i = 0; i < row2; i++) {
        matrix2[i] = (int *)malloc(col2 * sizeof(int));
    }

    // Allocate memory for result matrix
    result = (int **)malloc(row1 * sizeof(int *));
    for (i = 0; i < row1; i++) {
        result[i] = (int *)malloc(col2 * sizeof(int));
    }

    // Input elements for matrix1
    printf("Enter elements for Matrix 1:\n");
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col1; j++) {
            scanf("%d", &matrix1[i][j]);
        }
    }

    // Input elements for matrix2
    printf("Enter elements for Matrix 2:\n");
    for (i = 0; i < row2; i++) {
        for (j = 0; j < col2; j++) {
            scanf("%d", &matrix2[i][j]);
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            result[i][j] = 0;
            for (k = 0; k < col1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    // Display result matrix
    printf("Result Matrix:\n");
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }

    // Free allocated memory
    for (i = 0; i < row1; i++) {
        free(matrix1[i]);
    }
    free(matrix1);

    for (i = 0; i < row2; i++) {
        free(matrix2[i]);
    }
    free(matrix2);

    for (i = 0; i < row1; i++) {
        free(result[i]);
    }
    free(result);

    return 0;
}
